{"meta":{"title":"Emmroll's Blog","subtitle":"星光不问赶路人，时光不负有心人","description":null,"author":"孙彰冰","url":"http://yoursite.com","root":"/"},"pages":[],"posts":[{"title":"CSS定位","slug":"CSS定位","date":"2019-09-18T15:21:52.000Z","updated":"2019-09-19T06:37:58.653Z","comments":true,"path":"2019/09/18/CSS定位/","link":"","permalink":"http://yoursite.com/2019/09/18/CSS定位/","excerpt":"","text":"在CSS中,position属性用于定义元素的定位模式，语法为选择器{position: 属性值}position属性的常用值： 一、静态定位—所有元素的默认定位方式，position取值为static.静态定位唯一的用处就是来取消定位。####二、相对定位—将元素相对于它在标准流中的位置进行定位，position取值为relative.对元素进行相对定位之后，可以通过边偏移属性改变元素的位置，但是它在文档流中的位置仍然保留。 注意： 相对定位最重要的一点是，它可以通过边偏移移动位置，但是原来的所占的位置，继续占有。 其次，每次移动的位置，是以自己的左上角为基点移动（相对于自己来移动位置）就是说，相对定位盒子仍在标准流中，它后面的盒子仍以标准流方式对待它.(相对定位不脱标)如果说浮动的主要目的是，让多个块级元素在一行显示，那么定位的主要价值是移动位置，让盒子到我们想要的位置上去。 例子：说明了相对定位与浮动的不同之处，上面的盒子相对定位浮动了，但是原来的位置还在，所以下面的盒子也还在原地。 &lt;!DOCTYPE html&gt; &lt;html lang=&quot;en&quot;&gt; &lt;head&gt; &lt;meta charset=&quot;UTF-8&quot;&gt; &lt;title&gt;Document&lt;/title&gt; &lt;style&gt; div { width: 200px; height: 200px; background-color: pink; } .top { position: relative; top: 100px; left: 100px; } .bottom { background-color: purple; } &lt;/style&gt; &lt;/head&gt; &lt;body&gt; &lt;div class=&quot;top&quot;&gt;&lt;/div&gt; &lt;div class=&quot;bottom&quot;&gt;&lt;/div&gt; &lt;/body&gt; &lt;/html&gt;结果： 三、绝对定位—position属性值为absolute。绝对定位最重要的一点是，它可以通过边偏移移动位置，但是它完全脱标，完全不占位置 例子： &lt;!DOCTYPE html&gt; &lt;html lang=&quot;en&quot;&gt; &lt;head&gt; &lt;meta charset=&quot;UTF-8&quot;&gt; &lt;title&gt;Document&lt;/title&gt; &lt;style&gt; div { width: 200px; height: 200px; background-color: pink; } .top { position: absolute; } .bottom { background-color: purple; width: 210px; } &lt;/style&gt; &lt;/head&gt; &lt;body&gt; &lt;div class=&quot;top&quot;&gt;&lt;/div&gt; &lt;div class=&quot;bottom&quot;&gt;&lt;/div&gt; &lt;/body&gt; &lt;/html&gt;结果： 父级没有定位或者没有父元素（此时父元素是body）若所有的父元素都没有定位，以浏览器当前屏幕为准对齐（document文档)。 例子： &lt;!DOCTYPE html&gt; &lt;html lang=&quot;en&quot;&gt; &lt;head&gt; &lt;meta charset=&quot;UTF-8&quot;&gt; &lt;title&gt;Document&lt;/title&gt; &lt;style&gt; div { width: 200px; height: 200px; background-color: pink; } .top { position: absolute; right: 0; bottom: 0; } .bottom { background-color: purple; width: 210px; } &lt;/style&gt; &lt;/head&gt; &lt;body&gt; &lt;div class=&quot;top&quot;&gt;&lt;/div&gt; &lt;div class=&quot;bottom&quot;&gt;&lt;/div&gt; &lt;/body&gt; &lt;/html&gt;结果： 2.父亲有定位绝对定位将元素根据最近的已经定位（绝对、固定或者相对定位）的父元素（祖先）进行定位。 例子 &lt;!DOCTYPE html&gt; &lt;html lang=&quot;en&quot;&gt; &lt;head&gt; &lt;meta charset=&quot;UTF-8&quot;&gt; &lt;title&gt;Document&lt;/title&gt; &lt;style&gt; .father { width: 500px; height: 500px; background-color: pink; margin: 100px; position: relative; } .son { width: 200px; height: 200px; background-color: purple; position: absolute; left: 50px; top: 50px; } &lt;/style&gt; &lt;/head&gt; &lt;body&gt; &lt;div class=&quot;father&quot;&gt; &lt;div class=&quot;son&quot;&gt;&lt;/div&gt; &lt;/div&gt; &lt;/body&gt; &lt;/html&gt;结果： 子绝父相： 子级是绝对定位的话，父亲要用相对定位。很有用的准则！！！ 绝对定位的盒子水平/垂直居中普通的盒子左右margin改为auto就可以了，但是对于绝对定位就无效了。定位的盒子也可以水平或者垂直居中，有一个算法。 首先left：50%，父盒子一半的大小。 然后走自己外边距负的一般值就可以了margin-left &lt;!DOCTYPE html&gt; &lt;html lang=&quot;en&quot;&gt; &lt;head&gt; &lt;meta charset=&quot;UTF-8&quot;&gt; &lt;title&gt;Document&lt;/title&gt; &lt;style&gt; div { width: 200px; height: 200px; background-color: pink; position: absolute; /*margin: 0 auto;*/ /*加了定位和浮动的盒子margin: 0 auto;就失效了*/ left: 50%; margin-left: -100px; } &lt;/style&gt; &lt;/head&gt; &lt;body&gt; &lt;div&gt;&lt;/div&gt; &lt;/body&gt; &lt;/html&gt; 四、固定定位fixed固定定位是绝对定位的一种特殊形式，类似于正方形是一个特殊的矩形，它以浏览器窗口作为参照物来定义网页元素，当position属性的取值为fixed时，即可将元素的定位模式设置为固定定位。 当对元素设置固定定位之后，它将脱离标准文档流的控制，时钟依据浏览器窗口来定义自己的显示位置，不管浏览器滚动条如何滚动也不管浏览器的窗口的大小如何变化，该元素都会始终显示在浏览器窗口的固定位置。 固定定位有两点： 固定定位的元素跟父亲没有任何的关系，只认浏览器。 固定定位完全脱标，不占有位置，不随着滚动条滚动。 ####五、定位模式转换 元素添加和绝对定位和固定定位之后，元素模式也会发生转换，都转为行内块模式。行内块的宽度和高度和内容有关系。因此，比如行内元素 如果添加了绝对定位或者固定定位或者浮动之后，可以不用转换模式，直接给宽度和高度即可。","categories":[],"tags":[{"name":"定位的分类","slug":"定位的分类","permalink":"http://yoursite.com/tags/定位的分类/"}]},{"title":"CSS几种元素的分类及区别","slug":"CSS几种元素分类及区别","date":"2019-09-17T15:11:06.000Z","updated":"2019-09-18T02:15:39.284Z","comments":true,"path":"2019/09/17/CSS几种元素分类及区别/","link":"","permalink":"http://yoursite.com/2019/09/17/CSS几种元素分类及区别/","excerpt":"","text":"1. inline(行内元素)inline元素不会独占一行，多个相邻的行内元素会排列在同一行里，直到一行排列放不下才会新换一行，其宽度随元素的内容而变化。 注： inline元素设置width,height属性无效； 水平方向的padding-left,padding-right,margin-left,margin-right都产生边距效果； 竖直方向的padding-top,padding-bottom,margin-top,margin-bottom都不会产生边距效果。 常见inline元素：a,span,br,i,em,strong,label,q,var,cite,code 2.block(块级元素)block元素独占一行，多个block元素会各自新起一行。默认情况下，block元素宽度会自动填满其父元素宽度。 注： block元素可以设置height,width属性。 块级元素即使设置了宽度，仍然是独占一行。 block元素也可以设置padding和margin属性。 常见block元素：p，div,p,h1…h6,ol,ul,dl,table,address,blockquote,form 3.inline-block(行内块元素)简单来说就是将对象呈现为inline对象，但是对象的内容作为block对象呈现。之后的内联对象会被排列在同一行内。 比如我们可以给一个link(a元素)inline-block属性值，使其既有block的宽度高度特性又具有inline的同行特性。 常见inline-block元素：img,input","categories":[],"tags":[{"name":"inline,block,inline-block","slug":"inline-block-inline-block","permalink":"http://yoursite.com/tags/inline-block-inline-block/"}]},{"title":"TCP-UDP","slug":"TCP-UDP","date":"2019-09-16T11:19:42.000Z","updated":"2019-09-16T13:09:13.487Z","comments":true,"path":"2019/09/16/TCP-UDP/","link":"","permalink":"http://yoursite.com/2019/09/16/TCP-UDP/","excerpt":"","text":"TCP和UDP是传输层的两个协议 区别：1.TCP是面对连接的，UDP是面对无连接的（发送数据之前不需要先建立连接) Q:什么是面向连接，什么是面向无连接？ A:在互通之前，面向连接的协议会先建立连接，如TCP有三次握手，而UDP没有。** 2. TCP提供可靠的服务，而UDP是不可靠的。 Q: TCP为什么是可靠连接？ A：通过TCP连接传输的数据无差错、不丢失、不重复且按顺序到达。 TCP报文头里的序号能使TCP数据按序到达。 报文头里面的确认序号能保证不丢包，累计确认及超时重传机制。 TCP拥有流量控制及拥塞控制的机制。 3. TCP面向字节流，UDP面向报文。4. TCP只能一对一，UDP支持1对1，1对多。5. TCP的首部较大为20字节，而UDP只有8字节。TCP的三次握手在TCP/IP协议中，TCP协议提供可靠的链接服务，采用三次握手来建立一个连接。 第一次握手：建立连接时，客户端发送syn包（syn=j）到服务器，并进入SYN_SENT状态，等待服务器确认；SYN：同步序列编号（Synchronize Sequence Numbers）。 第二次握手：服务器收到syn包，必须确认客户的SYN（ack=j+1），同时自己也发送一个SYN包（syn=k），即SYN+ACK包，此时服务器进入SYN_RECV状态； 第三次握手：客户端收到服务器的SYN+ACK包，向服务器发送确认包ACK(ack=k+1），此包发送完毕，客户端和服务器进入ESTABLISHED（TCP连接成功）状态，完成三次握手。 TCP四次挥手","categories":[],"tags":[]},{"title":"前端知识之HTTP、HTML...","slug":"http-https","date":"2019-09-14T03:52:12.000Z","updated":"2019-09-15T13:14:11.016Z","comments":true,"path":"2019/09/14/http-https/","link":"","permalink":"http://yoursite.com/2019/09/14/http-https/","excerpt":"","text":"HTTP与HTTPS 基本概念 HTTP是超文本传输协议，用于从WWW服务器传输超文本到本地浏览器的传输协议，它可以使浏览器更加高效，使网络传输减少。HTTPS就是HTTP的安全版，在HTTP下加入SSL层（安全套阶层），主要作用是建立一个信息安全通道，来确保数据的传输，确保网站的真实性。 区别 *HTTPS协议需要ca证书，费用较高。 *HTTP是明文传输，HTTPS则是具有安全性的SSL加密传输协议。 *HTTP协议的端口为80，HTTPS的端口为443. *HTTPS比HTTP安全。 HTTPS工作原理 1.客户使用HTTPS url访问服务器，则要求web服务器建立SSL连接。 2.WEB服务器接收到客户端的请求之后，会将网站证书（证书中包含了公钥），或者说传输给用户。 3.客户端和WEB服务器端开始协商SSL连接的安全等级。 4.客户端浏览器通过协商好的安全等级，建立会话密钥，通过网络公钥来加密会话密钥，并传输给网站。 5.WEB服务器通过自己的私钥解密出会话密钥。 6.WEB服务器通过会话密钥加密与客户端之间通信。","categories":[],"tags":[]}]}